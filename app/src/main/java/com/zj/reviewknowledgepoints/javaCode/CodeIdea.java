package com.zj.reviewknowledgepoints.javaCode;

/**
 * Created by zj on 2019-02-12 10:01.
 * 论述 java核心思想
 */
public class CodeIdea {

    /**
     *  java 核心思想：（面向对象oop）
     *      封装、继承、多态  以及关注的 抽象
     *
     *      1.封装：
     *          -封装的本意就是隐藏实现细节，提高代码的安全性
     *          -外部只能通过有限的方法进行调用
     *          -是基于安全考虑拟定的一种解决思路
     *
     *      2.继承
     *          - 主要用于描述类与类之间的关系
     *          - public 属性修饰的内容可以进行继承
     *          - private 修饰的内容不可以被继承
     *          - java的继承，只能单继承，不可以多层继承
     *
     *      3.多态
     *          - 在继承关系里：父类引用指向子类对象
     *          - 在实现关系里：接口的实现类可以作为任何参数要求为接口类型的方法的参数
     *          - 基于实现关系的多态在后期使用场景，称为回调
     *          - 基于继承关系的多态实际场景使用不多
     *
     *      4. 抽象
     *          - abstract 可以使用在类和方法中
     *          - abstract修饰的类称为抽象类，抽象类内部可以没有抽象方法，但是抽象类不能够new对象，也就是抽象类不允许被实例
     *          - abstract修饰的方法称为抽象方法，抽象方法所在的类必须是抽象类，抽象方法可以有返回值和参数声明，但是绝对不能有方法体
     *
     *        ---如何理解抽象类？
     *              - 抽象方法的主要作用就是声明要求，具体实现由子类实现，自己不做具体实现
     *              - 可以把抽象方法理解为规则，在继承关系中，所有非抽象子类必须遵守，必须重写
     *
     *           接口
     *              - 接口里面全是抽象方法
     *              - 不需要使用abstract修饰
     *              - 不允许存在方法体，但是可以有返回值和参数列表
     *              - 接口和类的关系属于实现关系
     *              - 抽象类实现接口可以不重写接口里面的方法
     *              -非抽象类实现了接口必须重写里面的方法
     *
     *            枚举
     *              - 特殊常量定义方式
     *              - android 不建议使用枚举和反射技术
     *              - 枚举内容不允许进行修改
     *              - 枚举和常量最大的区别就是可以参与switch语句进行判断逻辑
     *
     */
}
